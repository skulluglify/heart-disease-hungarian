grid_cv_models = [
    ('RandomForestClassifier', lambda : GridSearchCV(RandomForestClassifier(), dict(
            n_estimators=[10, 50, 100, 200],
            max_depth=[3, 5, 10],
            criterion=['gini', 'entropy'],
        ),
        scoring="accuracy",
        cv=5,
    )),

    ('LinearRegression', lambda : GridSearchCV(LinearRegression(), dict(
            fit_intercept= [True],
            copy_X= [True],
            positive= [True],
        ),
        scoring="r2",
        cv=5,
    )),

    ('LogisticRegression', lambda : GridSearchCV(LogisticRegression(), dict(
            solver=['liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga'],
            C=np.logspace(-3, 3, 7),
        ),
        scoring="r2",
        cv=5,
    )),

    ('DecisionTreeClassifier', lambda : GridSearchCV(DecisionTreeClassifier(), dict(
            max_depth=[3, 5, 10],
            criterion=['gini', 'entropy'],
            splitter=['best', 'random'],
        ),
        scoring="accuracy",
        cv=5,
    )),

    ('DecisionTreeRegressor', lambda : GridSearchCV(DecisionTreeRegressor(), dict(
            max_depth=[3, 5, 10],
            criterion=['squared_error', 'absolute_error', 'friedman_mse', 'poisson'],
            splitter=['best', 'random'],
        ),
        scoring="r2",
        cv=5,
    )),

    ('KNeighborsClassifier', lambda : GridSearchCV(KNeighborsClassifier(), dict(
            n_neighbors=[3, 5, 7, 9],
            weights=['uniform', 'distance'],
            metric=['euclidean', 'manhattan', 'minkowski'],
        ),
        scoring="accuracy",
        cv=5,
    )),

    ('XGBClassifier', lambda : GridSearchCV(XGBClassifier(), dict(
            n_estimators=[10, 50, 100, 200],
            max_depth=[3, 5, 10],
            learning_rate=[0.01, 0.1, 0.2, 0.3],
        ),
        scoring="accuracy",
        cv=5,
    )),
]